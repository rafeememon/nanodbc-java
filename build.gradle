plugins {
  id 'java-library'
  id 'eclipse'
  id 'maven-publish'
  id 'com.palantir.git-version' version '0.10.1'
}

apply from: 'gradle/s3.gradle'

group = 'com.nanodbc'
version = gitVersion()

sourceCompatibility = '1.8'
targetCompatibility = '1.8'

repositories {
  mavenCentral()
}

configurations {
  javacpp
}

dependencies {
  javacpp group: 'org.bytedeco', name: 'javacpp', version: javacppVersion
  implementation group: 'org.bytedeco', name: 'javacpp', version: javacppVersion
}

task sourceJar(type: Jar) {
  classifier 'sources'
  from sourceSets.main.allJava
}

publishing {
  publications {
    mavenJava(MavenPublication) {
      from components.java

      artifact sourceJar
    }
  }
}

task compileJavacpp(type: JavaExec) {
  def cp = sourceSets.main.output.getFiles().join(File.pathSeparator)
  def includePathNanodbc = file('.').toString() + '\\nanodbc\\src'
  def includePathNanodbcJava = file('.').toString() + '\\src\\main\\cpp'

  classpath = configurations.javacpp
  main = 'org.bytedeco.javacpp.tools.Builder'
  args = [
    '-cp', cp,
    '-Xcompiler', includePathNanodbc + '\\nanodbc.cpp',
    '-Xcompiler', includePathNanodbcJava + '\\nanodbc_java.cpp',
    '-Xcompiler', 'odbc32.lib',
    '-Xcompiler', 'odbccp32.lib',
    '-Xcompiler', '/I' + includePathNanodbc,
    '-Xcompiler', '/I' + includePathNanodbcJava,
    '-Xcompiler', '/DNANODBC_DISABLE_ASYNC'
  ]
}

compileJavacpp.mustRunAfter compileJava, processResources
classes.dependsOn compileJavacpp
