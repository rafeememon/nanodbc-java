plugins {
  id 'java-library'
  id 'eclipse'
  id 'maven-publish'
  id 'com.palantir.git-version' version '0.10.1'
}

apply from: 'gradle/s3.gradle'

group = 'io.nanodbc'
version = gitVersion()

sourceCompatibility = '1.8'
targetCompatibility = '1.8'

repositories {
  mavenCentral()
}

configurations {
  javacpp
}

dependencies {
  javacpp group: 'org.bytedeco', name: 'javacpp', version: javacppVersion
  implementation group: 'org.bytedeco', name: 'javacpp', version: javacppVersion
}

jar {
  // Don't include unnecessary compiler outputs.
  exclude '**/*.exp', '**/*.lib', '**/*.obj'
}

task sourceJar(type: Jar) {
  classifier 'sources'
  from sourceSets.main.allJava
}

publishing {
  publications {
    mavenJava(MavenPublication) {
      from components.java

      artifact sourceJar
    }
  }
}

def nanodbcSrcPath = "${rootDir.toString()}\\nanodbc"
def nanodbcExtSrcPath = "${rootDir.toString()}\\nanodbc_ext"
def nanodbcBuildPath = "${rootDir.toString()}\\builddir"
def nanodbcLibPath = "${nanodbcBuildPath}\\nanodbc\\Release"
def nanodbcExtLibPath = "${nanodbcBuildPath}\\nanodbc_ext\\Release"
def nanodbcJavaOutputs = sourceSets.main.output.getFiles()

task buildNanodbc(type: Exec) {
  inputs.file "${rootDir.toString()}\\CMakeLists.txt"
  inputs.dir nanodbcSrcPath
  inputs.dir nanodbcExtSrcPath
  outputs.dir nanodbcBuildPath

  doFirst {
    exec {
      workingDir nanodbcBuildPath
      commandLine 'cmake', rootDir.toString()
    }
  }

  workingDir nanodbcBuildPath
  commandLine 'msbuild', 'ALL_BUILD.vcxproj', '/p:Configuration=Release'
}

task processJavacpp(type: JavaExec) {
  dependsOn compileJava, processResources, buildNanodbc

  // TODO: Set inputs and outputs

  classpath = configurations.javacpp
  main = 'org.bytedeco.javacpp.tools.Builder'
  args = [
    '-cp', nanodbcJavaOutputs.join(File.pathSeparator),
    '-o', 'jninanodbc',
    '-Xcompiler', "${nanodbcLibPath}\\nanodbc.lib",
    '-Xcompiler', "${nanodbcExtLibPath}\\nanodbc_ext.lib",
    '-Xcompiler', 'odbc32.lib',
    '-Xcompiler', 'odbccp32.lib',
    '-Xcompiler', "/I${nanodbcSrcPath}",
    '-Xcompiler', "/I${nanodbcExtSrcPath}"
  ]
}

classes.dependsOn processJavacpp
